#!/usr/bin/env node

if (process.argv.includes('-h') || process.argv.includes('--help')) {
  usage(0);
}

const [ server1, dir1 ] = splitLocation(process.argv[2]);
const [ server2, dir2 ] = splitLocation(process.argv[3]);

if (!dir1 || !dir2) {
  usage(1);
}

const spawn = require('child_process').spawn;

main();

// Function definitions

function usage(exitCode = 0) {
  console.log(`Compare all files within two directories.
This will display the filenames of any files that do not have the same hash.

A location can be local or remote (e.g. username@example.com:~/my/remote/file ~/my/local/file)
SSH will be used for remote files

Usage: ${process.argv[1]} <location1> <location2>
`);

  process.exit(exitCode);
}

function splitLocation(location = '') {
  if (!~location.indexOf(':')) {
    return [ '', location ] ;
  }
  return location.split(/:(.+)/);
}

function fetchHashes(server, dir) {
  return new Promise((resolve, reject) => {

    let cmd = `find . -type f -exec md5sum {} ;`;

    let args, opts = {};
    if (server) {
      args = [ server, `cd ${dir} && ${cmd.replace(';', '\\;')}` ];
      cmd = 'ssh';
    } else {
      args = cmd.split(' ');
      cmd = args.shift();
      opts.cwd = dir;
    }

    let hashes = {};
    let child = spawn(cmd, args, opts);

    child.on('error', error => reject(error));
    child.stdout.on('data', data => {
      let lines = `${data}`.split('\n');
      for (let line of lines) {
        let [ hash, filename ] = line.split(/ +(.+)/);
        if (filename) {
          hashes[filename.substr(2)] = hash;
        }
      }
    });

    child.on('close', () => resolve(hashes));
  });
}

function hashDiff([ left, right ]) {
  let diffs = { '<': [], '~': [], '>': [] };

  for (let filename of Object.keys(left).sort()) {
    if (left[filename] !== right[filename]) {
      diffs[right[filename] ? '~' : '<'].push(filename);
    }

    delete right[filename];
  }

  diffs['>'] = Object.keys(right).sort();

  return [ '<', '~', '>' ].reduce(
    (all, type) => all.concat(diffs[type].map(filename => `${type} ${filename}`)),
    []
  );
}

function main() {
  console.log('Calculating hashes...');
  Promise.all([
    fetchHashes(server1, dir1),
    fetchHashes(server2, dir2)
  ])
  .then(hashDiff)
  .then(differences => {
    if (differences.length) {
      console.log(`Found ${differences.length} differences:`);
      for (let filename of differences) {
        console.log(filename);
      }
      process.exit(1);
    } else {
      console.log('Found no differences!');
      process.exit(0);
    }
  })
  .catch(error => {
    console.log(error.stack);
    process.exit(1);
  });
}
